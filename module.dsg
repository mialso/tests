		module design document
*************************************************************************
<module>
*************************************************************************
		[description]:
	is an element of a program
		[base]:
*************************************************************************
	<block>
		[description]:
	is an element of a <module>, and is a sequence of <statement>s
		[types]:
	named		// can be executed
	anonymos
		[base]:
	functionality
	input | environment(context) before
	output | environment(context) after
*************************************************************************
	<statement>
		[description]:
	is an element of a block, is a sequence of ?what? // lang dependent
		[type]:
	move		// move some data
		data
		source, destination
		next statement = default (next line of code)
	call|exec	// call block by name (proc or function)
		input (args)
		output (return)
		context before/after
			local data
			external data
		next statement = default (next line of code)
	decision 	// switch between paths
		input
		condition
		next statement
			[type]:
		error	// return error
		fail	// exit with failure
**********************************************************************
	<path>
		[description]:
	is a logic unit, that consists of a number of blocks.
	path is an execution flow, which depends on context data.
	decisions are main elements to manage paths
		[type]:		// m.b. default paths names
	init
	main
	error | fail
		
